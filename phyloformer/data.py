"""
The data module contains functions that are used to load alignment data in a format that
the Phyloformer network understands. 
"""
import os
from typing import Dict, List, Tuple, Optional

import numpy as np
import skbio
import torch
from Bio import SeqIO
from ete3 import Tree
from torch.utils.data import Dataset

AMINO_ACIDS = np.array(list("ARNDCQEGHILKMFPSTWYVX-"))


class TensorDataset(Dataset):
    """A Dataset class to train Phyloformer networks"""

    def __init__(self, directory: str, filter: Optional[List[str]] = None):
        """Instanciates a TensorDataset

        Parameters
        ----------
        directory : str
            Path to the directory containing .tensor_pair files generated by the
            `make_tensors` script.
        filter: List[str], optional
            List of tensor pair names to keep (useful if you keep training and
            validation tensors in the same directory), default is None

        Returns
        -------
        TensorDataset
            A instance of TensorDataset for training phyloformer
        """
        super(TensorDataset, self).__init__()
        self.directory = directory
        self.pairs = [
            filepath
            for filepath in os.listdir(self.directory)
            if filepath.endswith(".tensor_pair")
        ]
        if filter is not None:
            self.pairs = [id for id in self.pairs if id in filter]

    def __len__(self):
        return len(self.pairs)

    def __getitem__(self, index: int):
        pair = torch.load(os.path.join(self.directory, (self.pairs[index])))
        return pair["X"], pair["y"]


def load_alignment(path: str) -> Tuple[torch.Tensor, List[str]]:
    """Loads an alignment into a tensor digestible by the Phyloformer network

    Parameters
    ----------
    path : str
        Path to a fasta file containing the alignment

    Returns
    -------
    Tuple[torch.Tensor, List[str]]
        a tuple containing:
         - a tensor representing the alignment (shape 22 * seq_len * n_seq)
         - a list of ids of the sequences in the alignment

    """

    tensor = []
    parsed = _parse_alignment(path)
    for sequence in parsed.values():
        tensor.append(
            torch.from_numpy(_sequence_to_one_hot(sequence)).t().view(22, 1, -1)
        )

    return torch.cat(tensor, dim=1).transpose(-1, -2), list(parsed.keys())


def _read_distances_from_tree(
    path: str, normalize: bool = False
) -> Dict[Tuple[str, str], float]:
    """Reads a phylogenetic tree and returns the corresponding distance matrix

    Parameters
    ----------
    path : str
        Path to the newick file containing the tree
    normalize : bool, optional
        Wether to normalize distances or not, by default False

    Returns
    -------
    Dict[Tuple[str, str], float]
        A dictionary representing the triangular distance matrix with:
         - as keys: a tuple of the leaf ids between which the distance is computed
         - as values: the distances

    """
    tree = Tree(path)
    distances = dict()
    for i, leaf1 in enumerate(tree):
        for j, leaf2 in enumerate(tree):
            if i < j:
                distances[(leaf1.name, leaf2.name)] = leaf1.get_distance(leaf2)
    if normalize:
        diameter = max(distances.values())
        for key in distances:
            distances[key] /= diameter

    return distances


def load_tree(path: str) -> Tuple[torch.Tensor, List[Tuple[str, str]]]:
    """Loads a tree as a tensor of pairwise distances, digestible by the Phyloformer
    network

    Parameters
    ----------
    path : str
        Path to the newick file containing the tree

    Returns
    -------
    Tuple[torch.Tensor, List[Tuple[str, str]]]
        a tuple containing:
         - a tensor representing the distance matrix of the tree (shape 1\*n_pairs)
         - a list of tuples of ids indicating between which leafs the distance was
           computed

    """
    distances = _read_distances_from_tree(path)
    tensor, ids = [], []
    for pair, distance in distances.items():
        tensor.append(distance)
        ids.append(pair)

    return (torch.tensor(tensor), ids)


def load_dataset(path: str) -> List[torch.Tensor]:
    pass


def _parse_alignment(path: str) -> Dict[str, str]:
    """Parser a fasta alignment

    Parameters
    ----------
    path : str
        Path to .fasta alignment file

    Returns
    -------
    Dict[str,str]
        A dictionnary with ids as keys and sequence as values
    """
    return {record.id: str(record.seq) for record in SeqIO.parse(path, format="fasta")}


def _sequence_to_one_hot(seq: str) -> np.ndarray:
    """Encode an amino acid sequence with one-hot encoding

    Parameters
    ----------
    seq : str
        Sequence of amino acids to encode

    Returns
    -------
    np.ndarray
        Encoded sequence (shape 22\*seq_len)
    """
    return np.array([(AMINO_ACIDS == aa).astype(int) for aa in seq])


def write_dm(dm: skbio.DistanceMatrix, path: str):
    """Write a distance matrix to disk in the square Phylip matrix format

    Parameters
    ----------
    dm : skbio.DistanceMatrix
        Distance matrix to save
    path : str
        Path where to save the matrix
    """

    with open(path, "w+") as file:
        file.write(f"{len(dm.ids)}\n")
        for id, dists in zip(dm.ids, dm.data):
            line = " ".join(str(dist) for dist in dists)
            file.write(f"{id}     {line}\n")
